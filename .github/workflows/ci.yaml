name: CI

on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

jobs:
  build: 
     runs-on: ubuntu-latest
     if: github.event_name == 'pull_request'
     
     steps: 
      - uses: actions/checkout@v3
      
      - name: cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # different for each OS and package manager
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-log.json') }}
          restore-keys: |
             ${{ runner.os }}-node-
             
      - name: install dependencies
        working-directory: ./react-app
        run: |
            npm ci
      - name: check formatting
        working-directory: ./react-app
        run: |
            npm run format:check
      - name: generate test coverage report
        working-directory: ./react-app
        run: |
            npm test -- --coverage
            ls coverage
        env:
          CI: true
      
      - name: upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: ./react-app/coverage # or path/to/artifact
     
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # different for each OS and package manager
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-log.json') }}
          restore-keys: |
             ${{ runner.os }}-node-
             
      - name: install dependencies
        working-directory: ./react-app
        run: |
            npm ci
      - name: check formatting
        working-directory: ./react-app
        run: |
            npm run format:check
      - name: generate test coverage report
        working-directory: ./react-app
        run: |
            npm test -- --coverage
        env:
          CI: true
      
      - name: upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: ./react-app/coverage # or path/to/artifact
          
      - name: build production app
        working-directory: ./react-app
        run: |
          npm run build
      - name: upload build folder
        uses: actions/upload-artifact@v3
        with:
          name: build-folder
          path: ./react-app/build # or path/to/artifact
      - name: zip artifacts
        working-directory: ./react-app
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Generate release
        if: github.ref == 'refs/heads/main'
        working-directory: ./react-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCHES: main
          REPO_URL: github.action_repository
          
        run : |
          echo $REPO_URL
          npx semantic-release 
      - name: set environment variables
        env:
          BRANCH: github.ref_name
        run: |
          if ${BRANCH} == develop; then
            echo "S3_BUCKET_NAME=$S3_STAGING_BUCKET_NAME" >> $GITHUB_ENV
            echo "S3_BUCKET_NAME is $S3_BUCKET_NAME"
          else
            echo "S3_BUCKET_NAME=$S3_PROD_BUCKET_NAME" >> $GITHUB_ENV
            echo "S3_BUCKET_NAME is $S3_BUCKET_NAME"
          fi
      
     
      # deploy to S3 
      - name: install aws-cli
        if: github.ref == 'refs/heads/develop'
        run: |
          sudo apt-get install python3-setuptools
          python3 -m pip install --user awscli
          echo "Checking awscli version"
          aws --version
      
       - name: invalidate cache in AWS cloudfront
        if: github.ref == 'refs/heads/main'
        env:
          DISTRIBUTION_ID:  EO74ZQXNB4XEU 
        run: |
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths /*
        
      
      - name: Deploy to Staging S3 bucket
        working-directory: ./react-app
        env: # Or as an environment variable
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         
        
        run: |
          aws s3 sync ./build s3://${S3_BUCKET_NAME}
